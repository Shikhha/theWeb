import React, { Component } from "react";
import "./Welcome.css";

class Welcome extends Component {
  state = {
    randomNo1: 0,
    randomNo2: 0,
    totalRandom: 0,
    targetValue: 0
  };

  randomize = () => {
    var target = [1, 2, 3, 12, 23, 13];
    var rand = target[Math.floor(Math.random() * target.length)];
    this.totalRandom = rand;
    this.randomNo1 = parseInt(this.totalRandom % 10);
    this.totalRandom / 10 >= 1
      ? (this.randomNo2 = parseInt(this.totalRandom / 10))
      : (this.randomNo2 = 0);
    this.setState({ totalRandom: this.state.totalRandom });
    this.setState({ randomNo1: this.state.randomNo1 });
    this.setState({ randomNo2: this.state.randomNo2 });
  };

  isChecked = checkId => {
    if (checkId === this.randomNo1 || checkId === this.randomNo2) return true;
    else return false;
  };

  displayStatus = checkId => {
    if (checkId === this.randomNo1 || checkId === this.randomNo2)
      return "checked";
    else return "unchecked";
  };

  setTargetValue = () => {
    var target = [1, 2, 3, 12, 23, 13];
    var rand = target[Math.floor(Math.random() * target.length)];
    this.targetValue = rand;
    var targetString = this.targetValue.toString();
    targetString =
      targetString.length !== 1
        ? (targetString =
            targetString.slice(0, 1) + "," + targetString.slice(1, 2))
        : targetString;

    return targetString;
  };

  getStateValue = () => {
    var result;
    if (this.randomNo1 !== 0 && this.randomNo2 !== 0) {
      result =
        this.randomNo1 === this.randomNo2
          ? this.randomNo1
          : this.randomNo1 < this.randomNo2
          ? this.randomNo1 + "," + this.randomNo2
          : this.randomNo2 + "," + this.randomNo1;
    } else {
      result = this.randomNo1 === 0 ? this.randomNo2 : this.randomNo1;
    }

    return result;
  };

  getResult = () => {
    var result =
      this.totalRandom === this.targetValue ? "Correct State" : "Wrong State";
    return result;
  };
  render() {
    return (

      <div>
        <header>
          <p className="welcome">Welcome to theWeb!</p>
        </header>

      <div>
        <p className="paragraph">Here you will find a number of HTML-comtrols, such as checkboxes, radiobuttons and inpit fields.
        There will also be a set of different controls, such as sliders and drag-and-drop controls</p>

        <p className="paragraph">Along with each controller, there will be an indicator that shows the status of the control.

        For instance, if a checkbox has been checked it will display "Checkbox 1 has been checked"</p>
        
        <p className="paragraph">
        This will be useful to make sure your automated test tool has been able to manipulate the control in a predicable way,
        and can be used to do regression testing of record-and-replay tools, or even scripting tools. 
        </p>

        <p className="paragraph">
        Here you will be able to find the following sections
        <ul>
        <li>Checkboxes: A number of checkbox examples</li>
        <li>Radiobuttons: A number of radiobutton examples</li>
        <li>Links: Different types of links</li>
        <li>Buttons: Different types of buttons</li>
        <li>Dropdowns: Different types of dropdowns</li>
        <li>Forms: Different types of forms</li>
        <li>Inputs: Different types of inputs</li>
        <li>Testareas: Different types of textareas</li>
        <li>Sliders: Different types of sliders</li>
        <li>Drag and drop: A drag-and-drop example</li>
        </ul> 
        </p>        

        <p className="paragraph">
        There will also be a more advanced case, where the desired state is generated by a random generator. 
        Here, the desired state must comply to that desired state to display "Correct state", otherwise the message "Wrong state" will be shown.
        This will force the test automation tool to read the state from the page and manipulate the controls accordingly, making it significantly 
        more difficult to automate.
        </p>

      </div>
      </div>

    );
  }
}

export default Welcome;
